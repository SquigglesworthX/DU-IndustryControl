{"slots":{"0":{"name":"screen","type":{"events":[],"methods":[]}},"1":{"name":"databank","type":{"events":[],"methods":[]}},"2":{"name":"element1","type":{"events":[],"methods":[]}},"3":{"name":"element2","type":{"events":[],"methods":[]}},"4":{"name":"element3","type":{"events":[],"methods":[]}},"5":{"name":"element4","type":{"events":[],"methods":[]}},"6":{"name":"element5","type":{"events":[],"methods":[]}},"7":{"name":"element6","type":{"events":[],"methods":[]}},"8":{"name":"element7","type":{"events":[],"methods":[]}},"9":{"name":"element8","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local mouseX = screen.getMouseX()\nlocal mouseY = screen.getMouseY()\n\nfunction doStart()\n    updateMachineStatus(\"Starting Machines\")\n    \n    doStartMachine(element1)\n    doStartMachine(element2)\n    doStartMachine(element3)\n    doStartMachine(element4)\n    doStartMachine(element5)\n    doStartMachine(element6)\n    doStartMachine(element7)\n    doStartMachine(element8)\n    \n    \nend\n\nfunction doStartMachine(machine)\n    if machine ~= nil and machine.getStatus and machine.getStatus() == \"STOPPED\" and machine.getElementClass() == 'IndustryUnit' then\n        if maintainAmount == 0 then\n            machine.start()\n            else\n            machine.startAndMaintain(maintainAmount)\n        end \n    end    \nend\n\nfunction doStop()\n    updateMachineStatus(\"Stopping Machines\")\n    \n    doStopMachine(element1)\n    doStopMachine(element2)\n    doStopMachine(element3)\n    doStopMachine(element4)\n    doStopMachine(element5)\n    doStopMachine(element6)\n    doStopMachine(element7)\n    doStopMachine(element8)    \n    \n\nend\n\nfunction doStopMachine(machine)\n    if machine ~= nil and machine.getStatus and machine.getStatus() ~= \"STOPPED\" and machine.getElementClass() == 'IndustryUnit' then\n        machine.softStop()\n    end\nend\n\nfunction doRestart()            \n    updateMachineStatus(\"Stopping Machines\")\n    unit.setTimer(\"restart\",5)\n    \n    doRestartMachine(element1)\n    doRestartMachine(element2)\n    doRestartMachine(element3)\n    doRestartMachine(element4)\n    doRestartMachine(element5)\n    doRestartMachine(element6)\n    doRestartMachine(element7)\n    doRestartMachine(element8)  \n\n     \nend\n\nfunction doRestartMachine(machine)\n    if machine ~= nil and machine.getElementClass and machine.getElementClass() == 'IndustryUnit' then\n        machine.hardStop(0)\n        doStartMachine(machine)\n    end\nend\n\nif machineStatus == \"\" then\n    if mouseX > 0.75 then\n        if mouseY > 0.25 and mouseY < 0.50 then\n            doStart()\n        elseif mouseY > 0.50 and mouseY < 0.75 then\n            doStop()\n        elseif mouseY > 0.75 then\n            doRestart()     \n        end\t\n    elseif mouseY > 0.20 and mouseY < 0.40  then\n        if mouseX < 0.375 then\n            saveAllKeys()\n            updateMachineStatus(\"Saving Configuration\")\n        else \n            if loadFromDatabank == \"True\" then\n                loadFromDatabank = \"False\"\n            else \n                loadFromDatabank = \"True\"\n            end\n            saveKey(\"loadFromDatabank\", loadFromDatabank)\n        end\n    end\nend","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"0"},"key":"0"},{"code":"machineName = \"Clearing TU\" --export: The product being made\nmaintainAmount = 0 --export: The amount that is being maintained\nitemMass = 1 --export: The mass per unit/L/M3 of the unit being produced in kg\n\nheaderSize = \"7vw\" --export: The size of the header font. Decrease for larger items.\nfontColor = \"black\" --export: The color of the text\nbackgroundColor = \"white\" --export: The normal background color to use.\nokColor = \"#98FB98\" --export: The background color to use when everything is good\nwarningColor = \"#FFFF00\" --export: The background color to use for warnings\nerrorColor= \"#FF4500\" --export: The background color to use when an error occurs\n\nefficiencyWarn = 90 --export: If efficiency is greater than this, a warning will be displayed. Use 101 to disable. \noverstockWarningAmount = 10000 --export: If the current stock is greater than this amount (in %), a warning will be displayed.\noverstockErrorAmount = 20000 --export: If the current stock is greater than this amount (in %), an error will be displayed.\n\nelement1Labell= \"Pure Hydrogen<br/>\" --export: Can be used to provide additional information on the table output for for the attached machine.\nelement1Label2= \"Pure Oxygen<br/>\" --export: Can be used to provide additional information on the table output for for the attached machine.\nelement1Label3= \"\" --export: Can be used to provide additional information on the table output for for the attached machine.\nelement1Label4= \"\" --export: Can be used to provide additional information on the table output for for the attached machine.\nelement1Label5= \"\" --export: Can be used to provide additional information on the table output for for the attached machine.\nelement1Label6= \"\" --export: Can be used to provide additional information on the table output for for the attached machine.\nelement1Label7= \"\" --export: Can be used to provide additional information on the table output for for the attached machine.\nelement1Label8= \"\" --export: Can be used to provide additional information on the table output for for the attached machine.\n\nloadFromDatabank=\"True\" --export: Used to load from databank values instead of these values. If no values are found, these values will be used instead.\n\nitemMassOverride1=0 --export: Used to override the specific mass value for the attached container/machine. Useful for ore monitors. \nitemMassOverride2=0 --export: Used to override the specific mass value for the attached container/machine. Useful for ore monitors. \nitemMassOverride3=0 --export: Used to override the specific mass value for the attached container/machine. Useful for ore monitors. \nitemMassOverride4=0 --export: Used to override the specific mass value for the attached container/machine. Useful for ore monitors. \nitemMassOverride5=0 --export: Used to override the specific mass value for the attached container/machine. Useful for ore monitors. \nitemMassOverride6=0 --export: Used to override the specific mass value for the attached container/machine. Useful for ore monitors. \nitemMassOverride7=0 --export: Used to override the specific mass value for the attached container/machine. Useful for ore monitors. \nitemMassOverride8=0 --export: Used to override the specific mass value for the attached container/machine. Useful for ore monitors. \n\nmachineFailureOverride=0 --Use this to to disable errors on industry machines that are erroring. Useful for Transfer Units that remove byproducts.\n\n\n\nfunction getKeyName(key)\n    if key ~= nil and key ~= \"\" then\n        return unit.getId()..key\n    end\n    return nil\nend\n\nfunction loadKey(keyName, value, objType)\n    local keyToLoad = getKeyName(keyName)\n\n    if objType == \"Float\" then\n        tempValue = databank.getFloatValue(keyToLoad)\n    else \n        tempValue = databank.getStringValue(keyToLoad)\n    end\n    \n\n    if tempValue ~= nil and tempValue ~= \"\" and tempValue ~= 0 then\n        return tempValue\n    else\n        return value\n    end\nend\t\n\nfunction loadAllKeys()\n    machineName = loadKey(\"machineName\",machineName)\n    headerSize = loadKey(\"headerSize\",headerSize)\n    fontColor = loadKey(\"fontColor\",fontColor)    \n    backgroundColor = loadKey(\"backgroundColor\",backgroundColor)\n    okColor = loadKey(\"okColor\",okColor)\n    warningColor = loadKey(\"warningColor\",warningColor)\n    errorColor = loadKey(\"errorColor\",errorColor)\n    element1Labell = loadKey(\"element1Labell\",element1Labell)\n    element1Label2 = loadKey(\"element1Label2\",element1Label2)\n    element1Label3 = loadKey(\"element1Label3\",element1Label3)\n    element1Label4 = loadKey(\"element1Label4\",element1Label4)\n    element1Label5 = loadKey(\"element1Label5\",element1Label5)\n    element1Label6 = loadKey(\"element1Label6\",element1Label6)\n    element1Label7 = loadKey(\"element1Label7\",element1Label7)\n    element1Label8 = loadKey(\"element1Label8\",element1Label8)\n\n    maintainAmount = loadKey(\"maintainAmount\",maintainAmount, \"Float\")\n    itemMass = loadKey(\"itemMass\",itemMass, \"Float\")\n    efficiencyWarn = loadKey(\"efficiencyWarn\",efficiencyWarn, \"Float\")\n    overstockWarningAmount = loadKey(\"overstockWarningAmount\",overstockWarningAmount, \"Float\")\n    overstockErrorAmount = loadKey(\"overstockErrorAmount\",overstockErrorAmount, \"Float\")\n    \n    itemMassOverride1 = loadKey(\"itemMassOverride1\",itemMassOverride1, \"Float\")\n    itemMassOverride2 = loadKey(\"itemMassOverride2\",itemMassOverride2, \"Float\")\n    itemMassOverride3 = loadKey(\"itemMassOverride3\",itemMassOverride3, \"Float\")\n    itemMassOverride4 = loadKey(\"itemMassOverride4\",itemMassOverride4, \"Float\")\n    itemMassOverride5 = loadKey(\"itemMassOverride5\",itemMassOverride5, \"Float\")\n    itemMassOverride6 = loadKey(\"itemMassOverride6\",itemMassOverride6, \"Float\")\n    itemMassOverride7 = loadKey(\"itemMassOverride7\",itemMassOverride7, \"Float\")\n    itemMassOverride8 = loadKey(\"itemMassOverride8\",itemMassOverride8, \"Float\")\n    \n    machineFailureOverride = loadKey(\"machineFailureOverride\",machineFailureOverride, \"Float\")\nend\n\nfunction saveKey(key,value, objType)\n    local keyToSave = getKeyName(key)\n    \n    if keyToSave ~= nil then\n        if objType == \"Float\" then\n            databank.setFloatValue(keyToSave,value)\n        else \n            databank.setStringValue(keyToSave,value)\n        end\n    end\nend\n\nfunction saveAllKeys()\n    saveKey(\"machineName\",machineName)\n    saveKey(\"headerSize\",headerSize)\n    saveKey(\"fontColor\",fontColor)    \n    saveKey(\"backgroundColor\",backgroundColor)\n    saveKey(\"okColor\",okColor)\n    saveKey(\"warningColor\",warningColor)\n    saveKey(\"errorColor\",errorColor)\n    saveKey(\"element1Labell\",element1Labell)\n    saveKey(\"element1Label2\",element1Label2)\n    saveKey(\"element1Label3\",element1Label3)\n    saveKey(\"element1Label4\",element1Label4)\n    saveKey(\"element1Label5\",element1Label5)\n    saveKey(\"element1Label6\",element1Label6)\n    saveKey(\"element1Label7\",element1Label7)\n    saveKey(\"element1Label8\",element1Label8)\n\n    saveKey(\"maintainAmount\",maintainAmount, \"Float\")\n    saveKey(\"itemMass\",itemMass, \"Float\")\n    saveKey(\"efficiencyWarn\",efficiencyWarn, \"Float\")\n    saveKey(\"overstockWarningAmount\",overstockWarningAmount, \"Float\")\n    saveKey(\"overstockErrorAmount\",overstockErrorAmount, \"Float\")  \n    saveKey(\"itemMassOverride1\",itemMassOverride1, \"Float\")\n    saveKey(\"itemMassOverride2\",itemMassOverride2, \"Float\")    \n    saveKey(\"itemMassOverride3\",itemMassOverride3, \"Float\")    \n    saveKey(\"itemMassOverride4\",itemMassOverride4, \"Float\")    \n    saveKey(\"itemMassOverride5\",itemMassOverride5, \"Float\")    \n    saveKey(\"itemMassOverride6\",itemMassOverride6, \"Float\")    \n    saveKey(\"itemMassOverride7\",itemMassOverride7, \"Float\")    \n    saveKey(\"itemMassOverride8\",itemMassOverride8, \"Float\")   \n    \n    saveKey(\"machineFailureOverride\",machineFailureOverride, \"Float\")  \nend\n\nmachineStatus = \"\"\n\nloadFromDatabank = loadKey(\"loadFromDatabank\", loadFromDatabank)\n\nif loadFromDatabank == \"True\" then\n    loadAllKeys()\nend\n\nunit.setTimer(\"live\",1)\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"1"},{"code":"headerColor = okColor\n\n\nfunction round(x, n)\n    n = 10^n\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\n\nfunction buildHeader(machineName)\n    return [[<div style=\"border-style: solid; text-align: center;margin: auto; border-width: 2px; font-size:]]..headerSize..[[; height:20vh; font-weight: bold;background-color:]]..headerColor..[[;\">]]..machineName..[[</div>]]\n    \nend\n\nfunction buildSaveBlock()\n\n    if machineStatus ~= \"\" then\n    \treturn [[<div style=\"border-style: none solid solid solid; height:20vh; border-width: 2px; padding: 12px; font-size: 3vw; vertical-align:middle;color: ]]..fontColor..[[;background-color:]]..backgroundColor..[[;\">]]..machineStatus..[[</div>]]   \n    end\n    \n    local loadHTML = \"Loading From: <br/>\"\n    if loadFromDatabank == \"True\" then\n        loadHTML = loadHTML..\"Databank\"\n    else\n        loadHTML = loadHTML..\"Config\"\n    end\n    \n    return [[<div style=\"font-size: 3vw; height:20vh; vertical-align:middle;background-color:]]..backgroundColor..[[;\"><table style=\"width: 100%; height:20vh;\"><tr><td style=\"width: 50%; border-style: solid; border-width: 2px;color: ]]..fontColor..[[;\">Save Settings</td><td style=\"width: 50%; border-style: solid; border-width: 2px;color: ]]..fontColor..[[;\">]]..loadHTML..[[</td></tr></table></div>]] \nend\n\nfunction buildMachineBlock(elementx, elementy, labelx, labely, massx, massy)    \n    if elementx == nil and elementy == nil then\n        return \"\"\n    end\n    \n    local width = \"100%\"\n    local returnHTML = \"<tr>\"\n    \n    --If both have machines/containers attached, split the width between them. \n    if element1 ~= nil and element2 ~= nil then\n        width = \"50%\"\n    end\n       \n    if elementx ~= nil and elementx.getElementClass() == 'IndustryUnit' then\n        returnHTML = returnHTML..buildIndustryBlock(elementx, width, labelx)\n    end\n    \n    if elementx ~= nil and elementx.getElementClass() == 'ItemContainer' then\n        returnHTML = returnHTML..buildContainerBlock(elementx, width, labelx, massx)\n    end\n    \n    if elementy ~= nil and elementy.getElementClass() == 'IndustryUnit' then\n        returnHTML = returnHTML..buildIndustryBlock(elementy, width, labely)\n    end \n    \n    if elementy ~= nil and elementy.getElementClass() == 'ItemContainer' then\n        returnHTML = returnHTML..buildContainerBlock(elementy, width, labely, massy)\n    end\n    \n    \n    \n    returnHTML = returnHTML..\"</tr>\"\n    return returnHTML    \nend\n\nfunction buildIndustryBlock(machine, width, label)\n    local efficiency = machine.getEfficiency() * 100;\n    efficiency = round(efficiency, 2)\n    local machineStatus = machine.getStatus() \n    local machineColor = okColor   \n    \n    if machineStatus ~= \"RUNNING\" and machineStatus ~= \"PENDING\" and machineFailureOverride ~= 1 then\n        machineColor = errorColor\n        updateStatus(errorColor)\n    elseif efficiency > efficiencyWarn then\n        machineColor = warningColor\n        updateStatus(warningColor)\n    end    \n    \n    local returnHTML = [[<td style=\"width: ]]..width..[[; border-style: solid; border-width: 2px;color: ]]..fontColor..[[;background-color:]]..machineColor..[[;\">]]..label..machineStatus\n    \n    if machineStatus == \"RUNNING\" then\n    \treturnHTML = returnHTML..[[<br />]]..efficiency..[[% Efficiency]]\n    end\n     \n    returnHTML = returnHTML..[[</td>]]\n    \n    return returnHTML\n    \nend\n\nfunction buildContainerBlock(container, width, label, mass)\n    if mass == nil or mass == 0 then\n        mass = itemMass\n    end\n\n    local numOfItems = round(container.getItemsMass()/mass,1)\n\n    local percent = numOfItems/maintainAmount*100\n    local colorForMaintain = getColorByPercent(percent)     \n    \n    return [[<td style=\"width: ]]..width..[[;  border-style: solid; border-width: 2px; color: ]]..fontColor..[[;background-color:]]..colorForMaintain..[[;\">]]..label..[[Current Stock:<br />]]\n        ..numOfItems..[[</td>]]\nend\n\n\nfunction updateStatus(newColor) \n    if newColor == errorColor and headerColor ~= errorColor then\n        headerColor = errorColor\n        return\n    elseif newColor == warningColor and headerColor ~= errorColor and headerColor ~= warningColor then\n        headerColor = warningColor\n        return\n    end\nend\n\n\n\nfunction buildTable()\n    return [[<table style=\"width: 100%;height:60vh;font-size: 2vw;color: ]]..fontColor..[[;background-color:]]..backgroundColor..[[;\">\n    <tbody>]]\n    ..buildMachineBlock(element1,element2,element1Labell,element1Label2,itemMassOverride1,itemMassOverride2)\n    ..buildMachineBlock(element3,element4,element1Label3,element1Label4,itemMassOverride3,itemMassOverride4)\n    ..buildMachineBlock(element5,element6,element1Label5,element1Label6,itemMassOverride5,itemMassOverride6)\n    ..buildMachineBlock(element7,element8,element1Label7,element1Label8,itemMassOverride7,itemMassOverride8)..[[\n    </tbody>\n    </table>]]\nend\n\nfunction getColorByPercent(percent)    \n    if percent <= 25 or percent > overstockErrorAmount\n        then \n        headerColor = errorColor\n        return errorColor\n    elseif (percent > 25 and percent < 50) or percent > overstockWarningAmount\n        then \n        headerColor = warningColor\n        return warningColor\n    else return okColor\n    end \nend\n\nfunction updateMachineStatus(message)\n    machineStatus = message\n    unit.setTimer(\"clear\",5)\nend\n\nlocal tableHTML = buildTable() -- build this first so that it updates the header color properly.\n\n\nscreen.setHTML([[<div>\n<div style=\"float: left; width: 75vw; text-align: center; height:100vh; font-weight: bold;color: ]]..fontColor..[[;background-color:White;\">\n]]..buildHeader(machineName)..buildSaveBlock()..[[\n<div>\n]]..tableHTML..[[\n</div>\n</div>\n<div style=\"float: left; width: 25vw; text-align: center;font-weight: bold;color: ]]..fontColor..[[;background-color:White;\">\n<div style=\"border-style: solid solid solid none; border-width: 2px; padding: 10px; font-size: 4vw; font-weight: bold; height:25vh;\">Maintain:<br /> ]]..maintainAmount..[[</div>\n<div style=\"border-style: none solid solid none; border-width: 2px; padding: 15px; font-size: 6vw;height:25vh;\">Start</div>\n<div style=\"border-style: none solid solid none; border-width: 2px; padding: 15px; font-size: 6vw;height:25vh;\">Stop</div>\n<div style=\"border-style: none solid solid none; border-width: 2px; padding: 15px; font-size: 6vw;height:25vh;\">Restart</div>\n</div>\n</div>]])","filter":{"args":[{"value":"live"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"unit.stopTimer(\"clear\")\ndoStart()\nunit.stopTimer(\"restart\")","filter":{"args":[{"value":"restart"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"machineStatus = \"\"\nunit.stopTimer(\"clear\")","filter":{"args":[{"value":"clear"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}